#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

// Values that stay constant for the whole mesh.
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform vec4 WorldLightPosition;

// Outputs to fragment shader
out vec3 normal;
out vec3 EyeDirection_cameraspace;
out vec2 UV;

uniform mat4 MVP;

const int totalLights = 2;
struct Light {
	vec4 lightDirection;
	float distance;
	float power;
};

out Light Lights[totalLights];

//Constant World Lights
vec4 lightsPosition[totalLights];
vec4 lightPosition = vec4(70.0, 0.0, 70.0, 1.0);
//vec4 lightPosition2 = vec4(-70.0, -1.0, -70.0, 1.0);

void main()
{
	lightsPosition[0] = WorldLightPosition;
	lightsPosition[1] = lightPosition;
	
	Lights[0].power = 1.0f;
	Lights[1].power = 0.6f;

	mat4 M = WorldTransform;
	mat4 V = ViewTransform;
	mat4 MV = V * M;
	mat4 MVP = ViewProjectionTransform * M;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// position of the vertex IN WORLDSPACE: WorldTransform * position
	vec3 Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;

	// vertex that goes from the vertex to the camera IN CAMERA SPACE
	// camera is at (0,0,0) IN CAMERA SPACE
	vec3 vertexPosition_cameraspace = ( MV * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	
	for (int x=0; x < totalLights; x++)
	{
		// vector that goes from the vertex to the light IN CAMERA SPACE
		vec3 LightPosition_cameraspace = ( V * lightsPosition[x]).xyz;
		Lights[x].lightDirection.xyz = LightPosition_cameraspace + EyeDirection_cameraspace;

		Lights[x].distance = length( lightsPosition[x].xyz - Position_worldspace.xyz );
	}

	// normal of the vertex IN CAMERA SPACE
	normal = ( MV * vec4(vertexNormal_modelspace,0)).xyz;
 
    // UV of the vertex. No special space for this one.
    UV = vertexUV;
}