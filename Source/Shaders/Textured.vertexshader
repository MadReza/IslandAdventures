#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormalPosition_modelSpace;
layout(location = 2) in vec2 vertexUV;

// Values that stay constant for the whole mesh.
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform vec3 LightPosition_worldspace;

// Outputs to fragment shader
out vec3 normal;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec2 UV;

uniform mat4 MVP;

void main()
{
 
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  ViewProjectionTransform * WorldTransform * vec4(vertexPosition_modelspace,1);

	// position of the vertex IN WORLDSPACE: WorldTransform * position
	Position_worldspace = (WorldTransform * vec4(vertexPosition_modelspace,1)).xyz;

	// vertex that goes from the vertex to the camera IN CAMERA SPACE
	// camera is at (0,0,0) IN CAMERA SPACE
	vec3 vertexPosition_cameraspace = ( ViewTransform * WorldTransform * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	
	// vector that goes from the vertex to the light IN CAMERA SPACE
	vec3 LightPosition_cameraspace = ( ViewTransform * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

	// normal of the vertex IN CAMERA SPACE
	normal = ( ViewTransform * WorldTransform * vec4(vertexNormal_modelspace,0)).xyz;
 
    // UV of the vertex. No special space for this one.
    UV = vertexUV;
}